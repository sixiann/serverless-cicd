AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Frontend CI/CD

Resources:
  AssetsBucket:
    Type: AWS::S3::Bucket

  # S3 BUCKETS
  b1S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: PublicReadWrite
      BucketName: b1S3Bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - HEAD
              - GET
            AllowedOrigins:
              - '*'
  b2S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: PublicReadWrite
      BucketName: b2S3Bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - HEAD
              - GET
            AllowedOrigins:
              - '*'
  
  # LAMBDA Functions
  searchPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Search Photos Lambda Function"
      FunctionName: search-photos-new
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt AllLambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        S3Bucket: photolambda
        S3Key: search-photos.zip

  indexPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Index Photos Lambda Function"
      FunctionName: index-photos-new
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt AllLambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        S3Bucket: photolambda
        S3Key: index-photos.zip

  # IAM Role
  AllLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "AllLambdaCombinedPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "s3:*"
                  - "s3-object-lambda:*"
                  - "rekognition:*"
                  - "es:*"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:DescribeAlarmsForMetric"
                  - "kms:DescribeKey"
                  - "kms:ListAliases"
                  - "lambda:GetPolicy"
                  - "lambda:ListFunctions"
                  - "lex:*"
                  - "polly:DescribeVoices"
                  - "polly:SynthesizeSpeech"
                  - "kendra:ListIndices"
                  - "iam:ListRoles"
                  - "s3:ListAllMyBuckets"
                  - "logs:DescribeLogGroups"
                  - "s3:GetBucketLocation"
                  - "lambda:AddPermission"
                  - "lambda:RemovePermission"
                  - "iam:GetRole"
                  - "iam:CreateServiceLinkedRole"
                  - "iam:DeleteServiceLinkedRole"
                  - "iam:GetServiceLinkedRoleDeletionStatus"
                  - "iam:PassRole"
                Resource: "*"
          ManagedPolicyArns: 
            - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
            - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
            - "arn:aws:iam::aws:policy/AmazonLexFullAccess"
