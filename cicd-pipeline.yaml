AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Frontend CI/CD

Resources:
  AssetsBucket:
    Type: AWS::S3::Bucket

  # S3 BUCKETS
  b1S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: PublicReadWrite
      BucketName: b1S3Frontend
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - HEAD
              - GET
            AllowedOrigins:
              - '*'
  b2S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: PublicReadWrite
      BucketName: b2S3Photos
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - HEAD
              - GET
            AllowedOrigins:
              - '*'
  
  # LAMBDA Functions
  LF2Lambda:
    Type: AWS::Lambda::Function
      Properties:
        Description: "Search Photos Lambda Function"
        FunctionName: LF2
        Handler: lambda_function.lambda_handler 
        MemorySize: 128
        # Role: !GetAtt LF2IAM.Arn
        Role: AllLambdaRole
        Runtime: python3.9
        Timeout: 30
        Code:
          S3Bucket: photolambda #preexisting bucket that contains lambda code 
          S3Key: LF2.zip

  LF1Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Index Photos Lambda Function"
      FunctionName: LF1
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      # Role: !GetAtt LF1IAM.Arn
      Role: AllLambdaRole
      Runtime: python3.9
      Timeout: 30
      Code:
        S3Bucket: photolambda
        S3Key: LF1.zip
        
  AllLambdaRole:
    Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
          - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
          - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
          - "arn:aws:iam::aws:policy/AmazonLexFullAccess"  
        Policies:
          - PolicyName: AllLambdaFunctionPolicy
            PolicyDocument:
              Statement:
                - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  Effect: Allow
                  Resource: arn:aws:logs:*:*:*
                - Action:
                  - s3: GetObject
                  Effect: Allow
                  Resource: arn:aws:s3:::photolambda/*
  
  # LF1IAM:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument: 
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: "LF1LambdaPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "logs:CreateLogGroup"
  #                 - "logs:CreateLogStream"
  #                 - "logs:PutLogEvents"
  #               Resource: arn:aws:s3:::photolambda/*
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:*
  #                 - s3-object-lambda:*
  #               Resource: '*'
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - rekognition:*
  #               Resource: '*'
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - es:*
  #               Resource: '*'

  
  # LF2IAM:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument: 
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: "searchPhotosLambdaPolicy"
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #                 - logs:CreateLogGroup
  #               Resource: arn:aws:s3:::photolambda/*
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - cloudwatch:GetMetricStatistics
  #                 - cloudwatch:DescribeAlarms
  #                 - cloudwatch:DescribeAlarmsForMetric
  #                 - kms:DescribeKey
  #                 - kms:ListAliases
  #                 - lambda:GetPolicy
  #                 - lambda:ListFunctions
  #                 - lex:*
  #                 - polly:DescribeVoices
  #                 - polly:SynthesizeSpeech
  #                 - kendra:ListIndices
  #                 - iam:ListRoles
  #                 - s3:ListAllMyBuckets
  #                 - logs:DescribeLogGroups
  #                 - s3:GetBucketLocation
  #               Resource:
  #                 - '*'
  #             - Effect: Allow
  #               Action:
  #                 - lambda:AddPermission
  #                 - lambda:RemovePermission
  #               Resource: arn:aws:lambda:*:*:function:AmazonLex*
  #               Condition:
  #                 StringEquals:
  #                   lambda:Principal: lex.amazonaws.com
  #             - Effect: Allow
  #               Action:
  #                 - iam:GetRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
  #                 - arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
  #                 - arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
  #                 - arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
  #             - Effect: Allow
  #               Action:
  #                 - iam:CreateServiceLinkedRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
  #               Condition:
  #                 StringEquals:
  #                   iam:AWSServiceName: lex.amazonaws.com
  #             - Effect: Allow
  #               Action:
  #                 - iam:CreateServiceLinkedRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
  #               Condition:
  #                 StringEquals:
  #                   iam:AWSServiceName: channels.lex.amazonaws.com
  #             - Effect: Allow
  #               Action:
  #                 - iam:CreateServiceLinkedRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
  #               Condition:
  #                 StringEquals:
  #                   iam:AWSServiceName: lexv2.amazonaws.com
  #             - Effect: Allow
  #               Action:
  #                 - iam:CreateServiceLinkedRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
  #               Condition:
  #                 StringEquals:
  #                   iam:AWSServiceName: channels.lexv2.amazonaws.com
  #             - Effect: Allow
  #               Action:
  #                 - iam:DeleteServiceLinkedRole
  #                 - iam:GetServiceLinkedRoleDeletionStatus
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
  #                 - arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
  #                 - arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
  #                 - arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
  #             - Effect: Allow
  #               Action:
  #                 - iam:PassRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
  #               Condition:
  #                 StringEquals:
  #                   iam:PassedToService:
  #                     - lex.amazonaws.com
  #             - Effect: Allow
  #               Action:
  #                 - iam:PassRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
  #               Condition:
  #                 StringEquals:
  #                   iam:PassedToService:
  #                     - lexv2.amazonaws.com
  #             - Effect: Allow
  #               Action:
  #                 - iam:PassRole
  #               Resource:
  #                 - arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
  #               Condition:
  #                 StringEquals:
  #                   iam:PassedToService:
  #                     - channels.lexv2.amazonaws.com
  
  
  # # ClientBucket:
  # #   Type: AWS::S3::Bucket
  # #   Properties:
  # #     OwnershipControls:
  # #       Rules:
  # #       - ObjectOwnership: BucketOwnerPreferred
  # #     PublicAccessBlockConfiguration:
  # #       BlockPublicAcls: false
  # #       BlockPublicPolicy: false
  # #       IgnorePublicAcls: false
  # #       RestrictPublicBuckets: false
  # #     WebsiteConfiguration:
  # #       IndexDocument: index.html
  # #       ErrorDocument: index.html

  # # BucketPolicy:
  # #   Type: AWS::S3::BucketPolicy
  # #   Properties:
  # #     PolicyDocument:
  # #       Id: PublicWebsitePolicy
  # #       Version: 2012-10-17
  # #       Statement:
  # #         - Sid: PublicReadForGetBucketObjects
  # #           Effect: Allow
  # #           Principal: '*'
  # #           Action: 's3:GetObject'
  # #           Resource: !Join
  # #             - ''
  # #             - - 'arn:aws:s3:::'
  # #               - !Ref ClientBucket
  # #               - /*
  # #     Bucket: !Ref ClientBucket
